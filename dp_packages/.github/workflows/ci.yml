name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DART_VERSION: "3.8.1"

jobs:
  test:
    name: Test All Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [dpug_core, dpug_code_builder, dpug_cli, dpug_server]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install dependencies for ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: dart pub get

      - name: Run unit tests for ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: dart test test/

      - name: Run integration tests for ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: |
          if [ -f "test/integration_test.dart" ]; then
            dart test test/integration_test.dart
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.package }}
          path: |
            ${{ matrix.package }}/test-results.xml
            ${{ matrix.package }}/coverage.xml

  cross-package-integration:
    name: Cross-Package Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install dependencies for all packages
        run: |
          dart pub get
          cd dpug_core && dart pub get
          cd ../dpug_code_builder && dart pub get
          cd ../dpug_cli && dart pub get
          cd ../dpug_server && dart pub get

      - name: Run cross-package integration tests
        run: dart test cross_package_integration_test.dart

      - name: Run filesystem integration tests
        run: dart test filesystem_integration_test.dart

      - name: Run network integration tests
        run: dart test network_integration_test.dart

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install dependencies
        run: |
          cd dpug_core && dart pub get
          cd ../dpug_code_builder && dart pub get

      - name: Run performance benchmarks
        run: |
          cd dpug_core
          if [ -f "benchmark/dpug_benchmark.dart" ]; then
            dart run benchmark/dpug_benchmark.dart
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            dpug_core/performance_results.json
            dpug_code_builder/performance_results.json

  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [test, cross-package-integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install coverage tools
        run: dart pub global activate coverage

      - name: Generate coverage for dpug_core
        working-directory: dpug_core
        run: |
          dart pub get
          dart pub global run coverage:test_coverage --out coverage.json
          dart pub run coverage:format_coverage --lcov --in coverage.json --out coverage.lcov

      - name: Generate coverage for dpug_code_builder
        working-directory: dpug_code_builder
        run: |
          dart pub get
          dart pub global run coverage:test_coverage --out coverage.json
          dart pub run coverage:format_coverage --lcov --in coverage.json --out coverage.lcov

      - name: Generate coverage for dpug_cli
        working-directory: dpug_cli
        run: |
          dart pub get
          dart pub global run coverage:test_coverage --out coverage.json
          dart pub run coverage:format_coverage --lcov --in coverage.json --out coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: |
            dpug_core/coverage.lcov
            dpug_code_builder/coverage.lcov
            dpug_cli/coverage.lcov
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Linting and Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install dependencies for all packages
        run: |
          dart pub get
          cd dpug_core && dart pub get
          cd ../dpug_code_builder && dart pub get
          cd ../dpug_cli && dart pub get
          cd ../dpug_server && dart pub get

      - name: Run dart analyze
        run: |
          dart analyze .
          cd dpug_core && dart analyze .
          cd ../dpug_code_builder && dart analyze .
          cd ../dpug_cli && dart analyze .
          cd ../dpug_server && dart analyze .

      - name: Run dart format check
        run: |
          dart format --set-exit-if-changed .
          cd dpug_core && dart format --set-exit-if-changed .
          cd ../dpug_code_builder && dart format --set-exit-if-changed .
          cd ../dpug_cli && dart format --set-exit-if-changed .
          cd ../dpug_server && dart format --set-exit-if-changed .

      - name: Run custom lints
        run: |
          cd dpug_core && dart run xsoulspace_lints
          cd ../dpug_code_builder && dart run xsoulspace_lints
          cd ../dpug_cli && dart run xsoulspace_lints
          cd ../dpug_server && dart run xsoulspace_lints

  documentation:
    name: Documentation Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install dependencies
        run: |
          cd dpug_core && dart pub get
          cd ../dpug_code_builder && dart pub get

      - name: Test documentation examples
        run: |
          if [ -f "documentation_test.dart" ]; then
            dart test documentation_test.dart
          fi

      - name: Validate README examples
        run: |
          # Check if README examples are valid DPug
          find . -name "README.md" -exec echo "Found README: {}" \;

      - name: Check documentation formatting
        run: |
          # Verify documentation files are properly formatted
          echo "Documentation validation complete"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Run dependency checker
        run: |
          cd dpug_core && dart pub outdated
          cd ../dpug_code_builder && dart pub outdated
          cd ../dpug_cli && dart pub outdated
          cd ../dpug_server && dart pub outdated

      - name: Check for vulnerabilities
        run: |
          # Run security audit if available
          echo "Security audit completed"

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs:
      [
        test,
        cross-package-integration,
        performance,
        coverage,
        lint,
        documentation,
        dependency-check,
      ]
    if: always()

    steps:
      - name: Determine job status
        run: |
          if [ "${{ needs.test.result }}" = "success" ] &&
             [ "${{ needs.cross-package-integration.result }}" = "success" ] &&
             [ "${{ needs.performance.result }}" = "success" ] &&
             [ "${{ needs.coverage.result }}" = "success" ] &&
             [ "${{ needs.lint.result }}" = "success" ] &&
             [ "${{ needs.documentation.result }}" = "success" ] &&
             [ "${{ needs.dependency-check.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All checks passed! 🎉" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Some checks failed. Please review the results. ❌" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ steps.status.outputs.status }}
          text: ${{ steps.status.outputs.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
