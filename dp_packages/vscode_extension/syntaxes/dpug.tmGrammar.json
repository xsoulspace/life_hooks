{
  "name": "dpug",
  "scopeName": "source.dpug",
  "fileTypes": [".dpug"],
  "patterns": [
    {
      "name": "comment.line.dpug",
      "match": "#.*$"
    },
    {
      "name": "meta.annotation.dpug",
      "match": "@[a-zA-Z_][a-zA-Z0-9_]*",
      "captures": {
        "0": { "name": "punctuation.definition.annotation.dpug" }
      }
    },
    {
      "name": "keyword.control.class.dpug",
      "match": "\\bclass\\b"
    },
    {
      "name": "keyword.control.widget.dpug",
      "match": "\\bWidget\\b"
    },
    {
      "name": "keyword.control.get.dpug",
      "match": "\\bget\\b"
    },
    {
      "name": "storage.type.primitive.dpug",
      "match": "\\b(int|double|String|bool|List|Map|dynamic|void)\\b"
    },
    {
      "name": "variable.other.property.dpug",
      "match": "\\.\\.[a-zA-Z_][a-zA-Z0-9_]*"
    },
    {
      "name": "entity.name.function.dpug",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*[:=(])"
    },
    {
      "name": "entity.name.type.class.dpug",
      "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
    },
    {
      "name": "variable.other.identifier.dpug",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    },
    {
      "name": "string.quoted.double.dpug",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.dpug",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "string.quoted.single.dpug",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.dpug",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "constant.numeric.dpug",
      "match": "\\b\\d+(\\.\\d+)?\\b"
    },
    {
      "name": "constant.language.boolean.dpug",
      "match": "\\b(true|false)\\b"
    },
    {
      "name": "keyword.operator.dpug",
      "match": "(=>|==|!=|<=|>=|<|>|=|\\+|\\-|\\*|/|%|\\!|\\&\\&|\\|\\|)"
    },
    {
      "name": "punctuation.definition.parameters.begin.dpug",
      "match": "\\("
    },
    {
      "name": "punctuation.definition.parameters.end.dpug",
      "match": "\\)"
    },
    {
      "name": "punctuation.definition.bracket.begin.dpug",
      "match": "\\["
    },
    {
      "name": "punctuation.definition.bracket.end.dpug",
      "match": "\\]"
    },
    {
      "name": "punctuation.definition.brace.begin.dpug",
      "match": "\\{"
    },
    {
      "name": "punctuation.definition.brace.end.dpug",
      "match": "\\}"
    },
    {
      "name": "punctuation.separator.colon.dpug",
      "match": ":"
    },
    {
      "name": "punctuation.separator.comma.dpug",
      "match": ","
    },
    {
      "name": "punctuation.separator.period.dpug",
      "match": "\\."
    },
    {
      "name": "meta.class.dpug",
      "begin": "^(@[a-zA-Z_][a-zA-Z0-9_]*\\s*)*\\bclass\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
      "end": "^(?!\\s)",
      "beginCaptures": {
        "1": { "name": "meta.annotation.dpug" },
        "2": { "name": "keyword.control.class.dpug" },
        "3": { "name": "entity.name.type.class.dpug" }
      },
      "patterns": [
        {
          "name": "meta.state.field.dpug",
          "match": "^(\\s+)(@[a-zA-Z_][a-zA-Z0-9_]*\\s+)?([a-zA-Z_][a-zA-Z0-9_:<>]*\\s+)?([a-zA-Z_][a-zA-Z0-9_]*\\s*)(=\\s*[^\\n]+)?",
          "captures": {
            "1": { "name": "punctuation.whitespace.indent.dpug" },
            "2": { "name": "meta.annotation.dpug" },
            "3": { "name": "storage.type.primitive.dpug" },
            "4": { "name": "variable.other.property.dpug" },
            "5": { "name": "keyword.operator.assignment.dpug" }
          }
        },
        {
          "name": "meta.build.method.dpug",
          "begin": "^(\\s+)\\bWidget\\b\\s+\\bget\\b\\s+\\bbuild\\b\\s+=>\\s*$",
          "end": "^(?!\\s)",
          "beginCaptures": {
            "1": { "name": "punctuation.whitespace.indent.dpug" },
            "2": { "name": "keyword.control.widget.dpug" },
            "3": { "name": "keyword.control.get.dpug" },
            "4": { "name": "entity.name.function.dpug" },
            "5": { "name": "keyword.operator.dpug" }
          },
          "patterns": [
            {
              "name": "meta.widget.tree.dpug",
              "begin": "^(\\s+)([A-Z][a-zA-Z0-9_]*)(?:\\([^)]*\\))?(?:\\s*$)?",
              "end": "^(?!\\s)",
              "beginCaptures": {
                "1": { "name": "punctuation.whitespace.indent.dpug" },
                "2": { "name": "entity.name.type.class.dpug" }
              },
              "patterns": [
                {
                  "name": "meta.widget.property.dpug",
                  "match": "^(\\s+)\\.\\.([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*([^\\n]+)",
                  "captures": {
                    "1": { "name": "punctuation.whitespace.indent.dpug" },
                    "2": { "name": "variable.other.property.dpug" },
                    "3": { "name": "keyword.operator.dpug" },
                    "4": { "name": "source.dart" }
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
